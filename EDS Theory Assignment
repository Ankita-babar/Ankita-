{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOIEcHF38s9EMIQfeygSftd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#Grocery Store Management using Numpy and Pandas\n","\n","\n","\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","\n","data = {'Item': ['Rice', 'Sugar', 'Wheat'], 'Price': [50, 40, 30], 'Quantity': [100, 150, 200]}\n","\n","df = pd.DataFrame(data)\n","\n","#1. Calculate the total stock value\n","\n","df['Total Value'] = df['Price'] * df['Quantity']\n","print(\"\\n1. Total stock value:\")\n","print(df)\n","\n","#2. Find the item with the highest quantity\n","\n","max_item = df.loc[df['Quantity'].idxmax()]\n","print(\"\\n2. Item with highest quantity:\")\n","print(max_item)\n","\n","#3. Average price of all items\n","\n","avg_price = df['Price'].mean()\n","print(f\"\\n3. Average Price: {avg_price}\")\n","\n","#4. Sort items by price descending\n","\n","sorted_df = df.sort_values(by='Price', ascending=False)\n","print(\"\\n4. Sorted by price descending:\")\n","print(sorted_df)\n","\n","#5. Filter items with quantity less than 120\n","\n","low_stock = df[df['Quantity'] < 120]\n","print(\"\\n5. Items with quantity less than 120:\")\n","print(low_stock)\n","\n","#6. Add 10% discount column\n","\n","df['Discounted Price'] = df['Price'] * 0.9\n","print(\"\\n6. After adding discounted price:\")\n","print(df)\n","\n","#7. Restock items (add 50 to each quantity)\n","\n","df['Quantity'] += 50\n","print(\"\\n7. After restocking:\")\n","print(df)\n","\n","#8. Total stock quantity available\n","\n","total_quantity = df['Quantity'].sum()\n","print(f\"\\n8. Total Quantity: {total_quantity}\")\n","\n","#9. Find missing data and fill it\n","\n","df.loc[1, 'Price'] = np.nan  # simulate missing data df['Price'].fillna(df['Price'].mean(), inplace=True) print(\"\\n9. After filling missing data:\") print(df)\n","\n","#10. Group items based on price ranges\n","\n","bins = [0, 30, 50, 100]\n","labels = ['Low', 'Medium', 'High']\n","df['Price Range'] = pd.cut(df['Price'], bins=bins, labels=labels)\n","print(\"\\n10. Grouped by price range:\")\n","print(df)\n","\n","#11. Calculate percentage contribution of each item's value\n","\n","df['Percentage Contribution'] = (df['Total Value'] / df['Total Value'].sum()) * 100\n","print(\"\\n11. Percentage contribution:\")\n","print(df[['Item', 'Percentage Contribution']])\n","\n","#12. Detect duplicate entries\n","\n","duplicate = df.duplicated()\n","print(\"\\n12. Duplicate check:\")\n","print(duplicate)\n","\n","#13. Merge grocery stock with supplier details\n","\n","supplier = pd.DataFrame({ 'Item': ['Rice', 'Sugar', 'Wheat'], 'Supplier': ['A Ltd', 'B Ltd', 'C Ltd'] })\n","\n","merged = pd.merge(df, supplier, on='Item')\n","print(\"\\n13. Merged with supplier details:\")\n","print(merged)\n","\n","#14. Create Pivot Table for item categories\n","\n","df['Category'] = ['Grain', 'Sweetener', 'Grain']\n","pivot = pd.pivot_table(df, values='Quantity', index='Category', aggfunc=np.sum)\n","print(\"\\n14. Pivot table:\")\n","print(pivot)\n","\n","#15. Visualize quantity of items using bar chart\n","\n","print(\"\\n15. Quantity Bar Chart:\")\n","df.plot(x='Item', y='Quantity', kind='bar', color='skyblue')\n","plt.title('Item Quantities')\n","plt.show()\n","\n","#16. Simulate random daily sales and update stock\n","\n","daily_sales = np.random.randint(5, 20, size=len(df))\n","df['Quantity'] -= daily_sales\n","print(\"\\n16. After daily sales:\")\n","print(df)\n","\n","#17. Find items with price greater than average\n","\n","expensive_items = df[df['Price'] > df['Price'].mean()]\n","print(\"\\n17. Items with price greater than average:\")\n","print(expensive_items)\n","\n","#18. Cumulative sum of sales value\n","\n","df['Cumulative Sales Value'] = df['Total Value'].cumsum()\n","print(\"\\n18. Cumulative Sales Value:\")\n","print(df)\n","\n","#19. Find correlation between price and quantity\n","\n","correlation = df['Price'].corr(df['Quantity'])\n","print(f\"\\n19. Correlation between Price and Quantity: {correlation}\")\n","\n","#20. Export the updated inventory to CSV\n","\n","df.to_csv('updated_inventory.csv', index=False)\n","print(\"\\n20. Exported successfully to 'updated_inventory.csv'\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"QT8Z_jP5SVAn","executionInfo":{"status":"ok","timestamp":1745691287906,"user_tz":-330,"elapsed":367,"user":{"displayName":"ANKITA BABAR","userId":"12294923394524718242"}},"outputId":"39cf2649-7d12-4775-bdb1-4f78426df8f2"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","1. Total stock value:\n","    Item  Price  Quantity  Total Value\n","0   Rice     50       100         5000\n","1  Sugar     40       150         6000\n","2  Wheat     30       200         6000\n","\n","2. Item with highest quantity:\n","Item           Wheat\n","Price             30\n","Quantity         200\n","Total Value     6000\n","Name: 2, dtype: object\n","\n","3. Average Price: 40.0\n","\n","4. Sorted by price descending:\n","    Item  Price  Quantity  Total Value\n","0   Rice     50       100         5000\n","1  Sugar     40       150         6000\n","2  Wheat     30       200         6000\n","\n","5. Items with quantity less than 120:\n","   Item  Price  Quantity  Total Value\n","0  Rice     50       100         5000\n","\n","6. After adding discounted price:\n","    Item  Price  Quantity  Total Value  Discounted Price\n","0   Rice     50       100         5000              45.0\n","1  Sugar     40       150         6000              36.0\n","2  Wheat     30       200         6000              27.0\n","\n","7. After restocking:\n","    Item  Price  Quantity  Total Value  Discounted Price\n","0   Rice     50       150         5000              45.0\n","1  Sugar     40       200         6000              36.0\n","2  Wheat     30       250         6000              27.0\n","\n","8. Total Quantity: 600\n","\n","10. Grouped by price range:\n","    Item  Price  Quantity  Total Value  Discounted Price Price Range\n","0   Rice   50.0       150         5000              45.0      Medium\n","1  Sugar    NaN       200         6000              36.0         NaN\n","2  Wheat   30.0       250         6000              27.0         Low\n","\n","11. Percentage contribution:\n","    Item  Percentage Contribution\n","0   Rice                29.411765\n","1  Sugar                35.294118\n","2  Wheat                35.294118\n","\n","12. Duplicate check:\n","0    False\n","1    False\n","2    False\n","dtype: bool\n","\n","13. Merged with supplier details:\n","    Item  Price  Quantity  Total Value  Discounted Price Price Range  \\\n","0   Rice   50.0       150         5000              45.0      Medium   \n","1  Sugar    NaN       200         6000              36.0         NaN   \n","2  Wheat   30.0       250         6000              27.0         Low   \n","\n","   Percentage Contribution Supplier  \n","0                29.411765    A Ltd  \n","1                35.294118    B Ltd  \n","2                35.294118    C Ltd  \n","\n","14. Pivot table:\n","           Quantity\n","Category           \n","Grain           400\n","Sweetener       200\n","\n","15. Quantity Bar Chart:\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-7-8ccc8e770a0a>:98: FutureWarning: The provided callable <function sum at 0x782c81708e00> is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n","  pivot = pd.pivot_table(df, values='Quantity', index='Category', aggfunc=np.sum)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","16. After daily sales:\n","    Item  Price  Quantity  Total Value  Discounted Price Price Range  \\\n","0   Rice   50.0       133         5000              45.0      Medium   \n","1  Sugar    NaN       187         6000              36.0         NaN   \n","2  Wheat   30.0       242         6000              27.0         Low   \n","\n","   Percentage Contribution   Category  \n","0                29.411765      Grain  \n","1                35.294118  Sweetener  \n","2                35.294118      Grain  \n","\n","17. Items with price greater than average:\n","   Item  Price  Quantity  Total Value  Discounted Price Price Range  \\\n","0  Rice   50.0       133         5000              45.0      Medium   \n","\n","   Percentage Contribution Category  \n","0                29.411765    Grain  \n","\n","18. Cumulative Sales Value:\n","    Item  Price  Quantity  Total Value  Discounted Price Price Range  \\\n","0   Rice   50.0       133         5000              45.0      Medium   \n","1  Sugar    NaN       187         6000              36.0         NaN   \n","2  Wheat   30.0       242         6000              27.0         Low   \n","\n","   Percentage Contribution   Category  Cumulative Sales Value  \n","0                29.411765      Grain                    5000  \n","1                35.294118  Sweetener                   11000  \n","2                35.294118      Grain                   17000  \n","\n","19. Correlation between Price and Quantity: -1.0\n","\n","20. Exported successfully to 'updated_inventory.csv'\n"]}]}]}